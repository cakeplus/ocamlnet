----------------------------------------------------------------------
Plan for Ocamlnet 3
----------------------------------------------------------------------

- Focus RPC:
  * Rpc_server: Allow to set timeout for the server response itself
    (self-watching)
  * Annotations
  * Doc: Tutorial for Rpc_proxy. Upgrade one example.

- Netlog:

  Modules to look through:
  - Rpc_client DONE
  - Rpc_server DONE
  - netplex: redirect DONE
  - Netplex_log.debug_* DONE
  - netplex debug messages DONE
  - Equeue DONE
  - Unixqueue_select DONE
  - Unixqueue_util DONE
  - Ftp_client DONE
  - Telnet_client DONE
  - Http_client DONE
  - Nethttpd DONE
  - Uq_ssl DONE
  - Shell DONE

  - Uq_gtk
  - Uq_tcl
  - netcgi2 Netcgi_ajp
  - netcgi2 Netcgi_common
  - netcgi2 Netcgi_scgi
  - Uq_socks5

  FD tracking:
  - FD tracking and fork() DONE
  - Netsys_pollset_posix DONE
  - Netcgi_ajp, _fcgi, _scgi: DONE
  - Http_client, Telnet_client, Ftp_client: DONE
  - Nethttpd DONE
  - Rpc_client, Rpc_server, Rpc_ssl DONE
  - Shell_sys DONE

  - Uq_socks5



- Focus Win32:

  * Documentation: What is supported on Win32?

  Bugs:
  - examples/rpc/finder: Investigate why not all handles are closed
    ("register_proxy: keeping 20/43 entries in proxy tbl")

    after starting finder_daemon, then shutting it down with netplex-admin

  - examples/rpc/finder: Unix_error(EUNKNOWNERROR 0, "socket", "")
    if daemon is started and then finder_client -shutdown.


- Focus Netplex:
  * Shut down master sockets after use.
 
  * netplex.descriptors: print fd table from Netlog

  * Netplex_control_routine:
    Use plugin mechanism to run ad-hoc defined routines in controller
    context.

    define_control_routines
      ["foo", (foo : string array -> string array); ... ]

    let [| ... |] = call_control_routine "foo" [| ... |]


  * Rpc_netplex: config var for Rpc_server.set_timeout

  * RPc_netplex:
      - "netplex.activations": Print all activations at a certain time
        (also for nethttpd?)

  * Revisit: helper containers for multi-processing. Make it easy to
    define a template at system startup time, and to instantiate it
    later at any time

  * Message passing between containers: Containers can define a 
    message queue, and other containers can send XDR-able messages.
    Queues are referenced by a global naming scheme.

  * Container-private servers. Containers may define additional RPC
    servers for local data traffic only.

  * Revisit: Netplex + UDP


- NetCGI cleanup
  * remove netcgi1
  * cgi = alias for netcgi2
  * remove nethttpd-for-netcgi1, and fix types in nethttpd_for_netcgi2

- Bug fixes:
  * RPC: prevent that xid's can be reused
  * nethttpd+netcgi2: GET /file//path?p=1
    parameters like p are not recognized when there is "//" in path

- syslog:
  * "syslog": Just calls syslog()
  * "syslog_emulation": The syslog protocol itself


- Other
  * Nethttpd: configurable error response (Nethttpd_plex, look for "TODO")
  * Nethttpd: suppress "broken pipe"
  * Check $Id$
  * Go through examples. Fix programming style
      nethttpd DONE
      rpc/finder DONE

  * Gprof support (as for Wink)
  * Log of deprecated functions (Netlog). Enabled by default.

--- Already done:

  * Rpc_proxy: layer on top of Rpc_client w/ automatic connection handling
  * Generate proxies
  * Rpc trace
  * Fix: `Accept_limit_length for Rpc_server. Add filters to clients, too
    (see msg by rafaelsen on ocamlnet-devel)
  * Bug Paolo Donadeo on ocamlnet-devel:
    `Redirect_response not working
  * Redesign Win32 named pipe support. Interface resembles socket API.
  * Security aspects of Win32 named pipes
  * Fully integrate named pipes into Unixqueue and Netplex
  * Limited support for anonymous pipes using helper threads
    (Netsys_win32: I/O threads; also support these whereever reasonable)
  * Support for something similar to Netsys_posix.spawn
  * Integrate win32 spawn into Shell
  * netplex: socket directory is ignored for Unix domain sockets.
    relative UD sockets should be taken relative to socket dir
  * netplex_main:
      - chdir for daemonize
  * netclient: Set "Host" header also for proxy requests
  * netclient: parsing fails of URL http://host?param
  * nethtml: <body> is now an essential block
  * netcgi2, url: better magic to enfore '/' between script name and path info

- Shell_uq/Shell_sys: Drop Shell_sys.wait implementation. Replace with
  engine. The system_handler is replaced by something like
  type system_handler = {
     mutable eng_opt : engine opt;
       (* The engine. abort stops it. run runs it *)
     watch_descriptors : Unix.file_descr list -> Unix.file_descr list -> unit
       (* Set the descriptors to watch *)
  }

  * Shell for POSIX systems: fix the style how ocamlnet waits for 
    forked processes. The current solution does not work well for
    mt programs because it is undefined which thread gets the SIGCHLD.

  * Netplex:
      - set logger earlier (if external logger is used): Now using Netlog.

- fd leaks / double close:
  * Netlog: implements hash table with used descriptors (in debugging
    mode)
    - for each managed fd:
        - owning module
        - type
        - GC hook: pointer to a finalisable block. When this block is collected
          the fd is set to state "garbage
    - which fd's to manage: the long-living fd's

----------------------------------------------------------------------
Performance improvements after Ocamlnet 3.0
----------------------------------------------------------------------

A list of possible improvements, once interfaces are stable again:

- Provide epoll/kqueue-based event_system

- Implement Netplex_semaphore with POSIX semaphores for systems
  supporting them

- Implement Netplex_sharedvar with Netshm shared memory for systems
  supporting that

- Implement Netsys_posix.spawn with posix_spawn for systems 
  supporting that

- Improve Rtypes performance

- RPC: generate direct mapping

- RPC: support relaying specially: if a server simply wants to forward
  an RPC call unchanged to a different port, there is no need to decode
  the message fully.

----------------------------------------------------------------------
Implementation improvements after Ocamlnet 3.0
----------------------------------------------------------------------

- Name_resulution_error
- Configurable async name resolution

- Cluster Message bus

- Improved shared memory support; RPC over shared memory

- Netdate: support for newer RFC date formats

- Fix netplex + nethttpd + async API: netcgi cannot be used right now

- Netclient: Support for CONNECT

- access to good random number generator on all platforms
  (for cryptogrpahy)

- CHECK: GSSAPI, krb5 for rpc

----------------------------------------------------------------------
Old stuff, check first
----------------------------------------------------------------------

Equeue:
	- Fix command engines as commented in the code.

	- Uq_engines.connector: currently raises Not_found for a name
	  resolution error. Do something better.

	Syntax for engine concatenation?
   	- when_state style:
  	  eng1 >> (function Success _ -> | Error _ -> | ...)
	- ...

Netplex:
	- Move accepted() from Control to System? Implement totally different
	  mechanisms?

	- Bug: daemonization doesn't wait until the inner process is
	  initialized (enough)

Integration of new netcgi2
	- All the TODOs in Netcgi_common
	  Sched: after 2.2.0 is out

	- Move new cookie implementation to Nethttp, and make it a 
	  class
	  Sched: 2.3

	- Faster URL encoding functions can be moved to Netencoding
	  if really faster
	  Sched: 2.3

netcgi2-plex:
	- Implement mount_dir/mount_at
	  Sched: 2.3

Bugs Tidalwave:
  * ocamlnet
	- Bug: Netstring_pcre.global_replace
	  Sched: after 2.2.0 is out

Http_client.pipeline:
	- aggressive caching does not work properly. Sometimes descriptors
	  are closed in the wrong moment.
	  Sched: 2.3
