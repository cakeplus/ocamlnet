Ocamlnet consists of a number of libraries:

- [netstring] is about processing strings that occur in network context
- [netcgi1] and [netcgi2] focus on portable web applications
- [nethttpd] is a web server component (HTTP server implementation)
- [netplex] is a generic server framework
- [rpc] implements OncRPC
- [netclient] implements clients for HTTP, FTP, and Telnet 
- [equeue] is an event queue used for many protocol implementations
- [shell] is about calling external commands
- [netshm] provides shared memory for IPC purposes
- [netsys] contains bindings for system functions
- [smtp] and [pop] are two further client implementations

A number of ideas and concepts are used throughout the libraries:

- {!Netchannels} are a way to abstract sequential I/O channels
- The event queues provided by {!Equeue} and {!Unixqueue} make
  asynchronous protocol interpreters possible

{2:netstring The [netstring] library}

[netstring] focuses on string processing functions.

{!modules: 
   Netconversion
   Netchannels
   Netstream
   Mimestring
   Netmime
   Netsendmail
   Neturl
   Netaddress
   Netbuffer
   Netdate
   Netencoding
   Netulex
   Netaccel
   Netaccel_link
   Nethtml
   Nethttp
   Netstring_str
   Netstring_pcre
   Netstring_mt
   Netmappings
   Netaux}

{3:netstring_intro Guides}

- {!module:Netchannels_tut}: The [Netchannels] tutorial - {b strongly 
  recommended read!}
- {!module:Netmime_tut}: The [Netmime] tutorial
- {!module:Netsendmail_tut}: The [Netsendmail] tutorial
- {!module:Netulex_tut}: The [Netulex] tutorial
- {!module:Neturl_tut}: The [Neturl] tutorial

{2:netcgi1 The [netcgi1] library}

The [netcgi1] library is the old library for writing portable web
applications, formerly known as [cgi] (this name is now an alias
for [netcgi1]). Its features are frozen. A description
of its interfaces can be found {{:netcgi1/index.html} here}.

Note that it is not possible to use [netcgi1] and [netcgi2] at the same
time.


{2:netcgi2 The [netcgi2] library}

This is the revised library for Web applications, now called [netcgi2].

{!modules:
    Netcgi
    Netcgi_common
    Netcgi_cgi
    Netcgi_fcgi
    Netcgi_ajp
    Netcgi_scgi
    Netcgi_test
    Netcgi_mod
    Netcgi_modtpl
    Netcgi_dbi
    Netcgi1_compat}

Note that it is not possible to use [netcgi1] and [netcgi2] at the same
time.

{3:netcgi_intro Guides}

- {!module:Netcgi_porting}: Porting [netcgi1] programs to [netcgi2]

{2:nethttpd The [nethttpd] library}

The [nethttpd] library is a Web server component written in O'Caml. 
For a full web server, you'll also need [netplex].

{!modules:
   Nethttpd_types
   Nethttpd_kernel
   Nethttpd_reactor
   Nethttpd_engine
   Nethttpd_services
   Nethttpd_plex}

{3:nethttpd_intro Guides}

- {!module:Nethttpd_intro}: Overview over the HTTP daemon

{2:netplex The [netplex] library}

The [netplex] library is a protocol-independent server framework. 
Especially, it can be used in conjunction with [nethttpd] to
build web servers, and with [rpc] to build RPC servers.

{!modules:
    Netplex_types
    Netplex_config
    Netplex_controller
    Netplex_container
    Netplex_sockserv
    Netplex_workload
    Netplex_kit
    Netplex_log
    Netplex_main
    Netplex_mp
    Netplex_mt
    Rpc_netplex}
    
{3:nethttpd_intro Guides}

- {!module:Netplex_intro}: Introduction to [Netplex]


{2:equeue The [rpc] library}

This library implements OncRPC (alias SunRPC).

{!modules:
   Rtypes
   Xdr
   Rpc
   Rpc_program
   Rpc_client
   Rpc_simple_client
   Rpc_server
   Rpc_auth_sys
   Rpc_portmapper
   Rpc_portmapper_aux
   Rpc_portmapper_clnt
   Rpc_transport
   Rpc_packer}

{3:rpc_intro Guides}

- {!module:Rpc_intro}: Introduction
- {!module:Rpc_mapping_ref}: RPC Language Mapping Reference

{3:rpc_local The [rpc-auth-local] extension}

Authentication for local socket connections.

{!modules:
    Rpc_auth_local}

{3:rpc_authdh The [rpc-auth-dh] extension}

This is Diffie-Hellman authentication for OncRPC (also known as
"Secure RPC").

{!modules:
    Rpc_auth_dh
    Rpc_key_service
    Rpc_time}

{3:rpc_xti The [rpc-xti] extension}

System V provides a network API called XTI in addition to the socket API.
This library allows it to connect to RPC services that can only be reached
over a local XTI connection ("cots" connection).

{!modules:
    Rpc_xti_client}

{3:rpc_ssl The [rpc_ssl] extension}

This library allows you to tunnel RPC through SSL/TLS.

{!modules:
    Rpc_ssl}


{2:netclient The [netclient] library}

This library includes clients for HTTP, Telnet, and (incomplete) FTP.

{!modules:
   Http_client
   Telnet_client
   Ftp_client
   Ftp_data_endpoint
}


{2:equeue The [equeue] library}

[equeue] is a fundamental library for event queues. It is mainly used
by a number of other libraries of Ocamlnet to parallelize network code
(so-called multiplexing).

{!modules:
   Equeue
   Unixqueue
   Unixqueue_mt
   Uq_engines
   Uq_socks5}

{3:equeue_intro Guides}

- {!module:Equeue_intro}: Introduction to programming with [equeue]

{3:equeue_gtk The [equeue-gtk1] and [equeue-gtk2] extensions}

Extensions for [equeue] to integrate the event queue into user interfaces
made with lablgtk and lablgtk2

{!modules:
  Uq_gtk}

{3:equeue_ssl The [equeue-ssl] extension}

Extensions for [equeue] to support SSL

{!modules:
   Uq_ssl}

{3:equeue_tcl The [equeue-tcl] extension}

Extension for [equeue] to integrate the event queue into user interfaces
made with labltk

{!modules:
  Uq_tcl}

{2:pop The [pop] library}

This is a simple POP 3 client.

{!modules:
    Netpop}

{2:smtp The [smtp] library}

This is a simple SMTP client.

{!modules:
    Netsmtp}

{2:shell The [shell] library}

The [shell] library allows you to start external commands. It is integrated
into [equeue].

{!modules:
    Shell
    Shell_sys
    Shell_uq
    Shell_mt}

{3:shell_intro Guides}

- {!module:Shell_intro}: Motivation for [shell]

{2:netshm The [netshm] library}

The [netshm] library manages a shared memory object either as hash table
or array. It is designed to be used in multi-processing program architectures.

{!modules:
    Netshm
    Netshm_data
    Netshm_hashtbl
    Netshm_array}

{3:netshm_intro Guides}

- {!module:Netshm_intro}: Shared Memory for IPC

{2:netsys The [netsys] library}

The [netsys] library contains a number of low-level functions used by
other Ocamlnet libraries.

{!modules:
    Netsys}

{2 Index}

{!indexlist}

{2 Authors}

The Ocamlnet libraries have been initially written by Gerd Stolpmann and
Patrick Doane.

Contributions by

- Nicolas George: Netdate
- Eric Stokes: FastCGI support
- Pierre Habouzit: SMTP client
- Christophe Troestler: Revised version of [netcgi]

Sponsorships by

- Baretta s.r.l: Nethttpd
- California State University: SSL support for RPC, Netplex
