Ocamlnet is an enhanced system platform library for Ocaml. As the name
suggests, large parts of it have to do with network programming, but
it is actually not restricted to this. Other parts deal with the
management of multiple worker processes, and the interaction with
other programs running on the same machine. You can also view Ocamlnet
as an extension of the system interface as provided by the [Unix]
module of the standard library.

So, which kind of applications can profit from Ocamlnet?

- {b Web applications} can use the [netcgi2] library which provides
  all core functionality like connecting to web servers, decomposing
  web requests, and emitting web data. With the [nethttpd] library
  Ocamlnet even includes a little web server of its own, so
  stand-alone Ocaml programs can respond to HTTP requests. This is
  especially interesting for providing high-speed HTTP-based APIs
  like REST interfaces.
- {b Client/server architectures} can be built with the included SunRPC
  support. This is a very robust and mature implementation of this
  binary RPC protocol, both on the client and the server side. It
  is wire-compatible with C implementations of SunRPC. There is a
  generator for transforming SunRPC IDL files into Ocaml
  modules. Authentication and encryption are also supported (using
  GSS-API, or the non-standard SSL extension).
- {b Compute jobs} profit from Ocamlnet because the [netmulticore]
  library allows it to run compute tasks on as many cores of the
  machine as needed. The tasks can communicate with message passing
  and exchange data via shared memory. Of course, [netmulticore] is 
  strictly typed.
- {b Any kind of application} can cherry-pick the parts of Ocamlnet
  that are considered useful. Especially, Ocamlnet includes a number
  of network clients (for HTTP, FTP, Telnet, SMTP, POP), and a large
  number of network-related string processing functions (e.g. for
  URL's, Base64, UTF-8, mail headers). For interacting with the system
  there are functions to invoke subcommands ([shell] library),
  and also for globbing, sending email, and logging. Local and remote
  filesystems can be accessed with the {!Netfs} framework. The
  [netsys] library wraps lots of additional system calls that are
  missing in the Ocaml standard library.

A number of ideas and concepts are used throughout the libraries:

- {!Netchannels} are a way to abstract sequential I/O channels
- The event queues provided by {!Equeue} and {!Unixqueue} make
  asynchronous protocol interpreters possible
- The [netplex] library manages worker subprocesses, e.g. for
  accepting network connections or for doing computations.

{2 Introductory chapters}
{div guide}
{3 Guides}

- {!Foreword}: How Ocamlnet is organized
- {!Platform}: Which functions are available on which platform
  (POSIX/Win32). Also hints for portable programming.
- {!Ipv6}: The state of IPv6 support
- {!Regexp}: Regular expression backends

{divend guide}

Related external articles:

- {{:http://blog.camlcity.org/blog/ocamlnet3_release.html} Ocamlnet 3
  finally released}
- {{:http://blog.camlcity.org/blog/ocamlnet3_win32.html} Stranger in
  a strange land}, by Gerd Stolpmann. The Win32 port in Ocamlnet 3.

{2 Contents by library}

{ul
  {- {!Intro.ch_base}
     {ul
       {- {!Intro.netstring}}
       {- {!Intro.netzip}}
       {- {!Intro.equeue}}
       {- {!Intro.netplex}}
       {- {!Intro.netshm}}
       {- {!Intro.netsys}}
     }
  }
  {- {!Intro.ch_web}
     {ul
       {- {!Intro.netcgi2}}
       {- {!Intro.netcgi2_apache}}
       {- {!Intro.netcgi2_plex}}
       {- {!Intro.nethttpd}}
     }
  }
  {- {!Intro.ch_cs}
     {ul
       {- {!Intro.rpc}}
       {- {!Intro.rpc_local}}
       {- {!Intro.rpc_authdh}}
       {- {!Intro.rpc_xti}}
       {- {!Intro.rpc_ssl}}
       {- {!Intro.netgssapi}}
       {- {!Intro.netmech_scram}}
     }
  }
  {- {!Intro.ch_comp}
     {ul
       {- {!Intro.netcamlbox}}
       {- {!Intro.netmulticore}}
     }
  }
  {- {!Intro.ch_netproto}
     {ul
       {- {!Intro.netclient}}
       {- {!Intro.pop}}
       {- {!Intro.smtp}}
     }
  }
}





{1:ch_base Base Libraries}


{div guide}
{3:ch_base_guides Guides}

- {!module:Netchannels_tut}: The [Netchannels] tutorial - {b strongly 
  recommended read!}
- {!module:Netmime_tut}: The [Netmime] tutorial
- {!module:Netsendmail_tut}: The [Netsendmail] tutorial
- {!module:Netulex_tut}: The [Netulex] tutorial
- {!module:Neturl_tut}: The [Neturl] tutorial
- {!module:Equeue_howto}: The Equeue, Unixqueue, and Engines HOWTO
- {!module:Equeue_intro}: Introduction to programming with [equeue]
- {!module:Netplex_intro}: Introduction to [Netplex]
- {!module:Netplex_advanced}: Advanced features of [Netplex]
- {!module:Netplex_admin}: Netplex administration guide
- {!module:Netshm_intro}: Shared Memory for IPC
- {!module:Shell_intro}: Motivation for [shell]

{divend guide}

{3:equeue_blog External articles}

- {{:http://ambassadortothecomputers.blogspot.com/2009/02/equeue-compared-to-lwt.html} Equeue compared to Lwt}, by Jake Donham.
- {{:http://blog.camlcity.org/blog/parallelmm.html} Parallelizing with
  Ocamlnet}, by Gerd Stolpmann. Demonstrates how to parallelize
  matrix multiplications with Netplex-controlled worker processes.
- {{:http://blog.camlcity.org/blog/ocamlnet3_mp.html} 
  Mastering Multi-processing}, by Gerd Stolpmann. About the new
  synchronization primitives in Ocamlnet 3

{2:netstring The [netstring] library: string processing functions}

[netstring] focuses on string processing functions, and base definitions
for other libraries.

{!modules: 
   Netconversion
   Netunichar
   Netchannels
   Netstream
   Mimestring
   Netmime
   Netsendmail
   Neturl
   Netsockaddr
   Netaddress
   Netbuffer
   Netpagebuffer
   Netdate
   Netencoding
   Netulex
   Netaccel
   Netaccel_link
   Nethtml
   Nethttp
   Netfs
   Netglob
   Netauth
   Netcompression
   Netstring_str
   Netmappings
   Netaux
   Netnumber
   Rtypes
   Xdr
   Xdr_mstring
}

{2:netstring_pcre The [netstring-pcre] library: additions for PCRE}

{!modules:
   Netstring_pcre
}

{2:netzip The [netzip] library: compression for object channels}

Support for (un)compressing data on the fly with object channels.
Requires ocamlzip.

{!modules:
    Netgzip}

{2:equeue The [equeue] library: concurrent execution flows via event queues}

[equeue] is a fundamental library for event queues. It is mainly used
by a number of other libraries of Ocamlnet to parallelize network code
(so-called multiplexing).

{!modules:
   Equeue
   Unixqueue
   Unixqueue_pollset
   Unixqueue_select
   Uq_engines
   Uq_socks5
   Uq_resolver
   Uq_io
   Uq_lwt
   Uq_libevent
   Uq_mt
}


{3:equeue_gtk The [equeue-gtk1] and [equeue-gtk2] extensions}

Extensions for [equeue] to integrate the event queue into user interfaces
made with lablgtk and lablgtk2

{!modules:
  Uq_gtk}

{3:equeue_ssl The [equeue-ssl] extension}

Extensions for [equeue] to support SSL

{!modules:
   Uq_ssl
   Https_client
}

{3:equeue_tcl The [equeue-tcl] extension}

Extension for [equeue] to integrate the event queue into user interfaces
made with labltk

{!modules:
  Uq_tcl}

{2:netplex The [netplex] library: generic server framework}

The [netplex] library is a protocol-independent server framework. 
Especially, it can be used in conjunction with [nethttpd] to
build web servers, and with [rpc] to build RPC servers.

{!modules:
    Netplex_types
    Netplex_config
    Netplex_controller
    Netplex_container
    Netplex_sockserv
    Netplex_workload
    Netplex_kit
    Netplex_cenv
    Netplex_log
    Netplex_main
    Netplex_mp
    Netplex_mt
    Netplex_mutex
    Netplex_semaphore
    Netplex_sharedvar
    Netplex_mbox
    Netplex_encap
    Rpc_netplex}
    

{2:shell The [shell] library: start external commands}

The [shell] library allows you to start external commands. It is integrated
into [equeue].

{!modules:
    Shell
    Shell_sys
    Shell_uq
    Shell_fs}


{2:netshm The [netshm] library: manage shared memory}

The [netshm] library manages a shared memory object either as hash table
or array. It is designed to be used in multi-processing program architectures.
Note that there is now also the much better {!Intro.netmulticore} library.

{!modules:
    Netshm
    Netshm_data
    Netshm_hashtbl
    Netshm_array}


{2:netsys The [netsys] library: system interfaces}

The [netsys] library contains a number of low-level functions used by
other Ocamlnet libraries.

{!modules:
    Platform
    Netexn
    Netlog
    Netsys
    Netsys_posix
    Netsys_oothr
    Netsys_signal
    Netsys_tmp
    Netsys_mem
    Netsys_sem
    Netsys_pollset
    Netsys_pollset_generic
    Netsys_pollset_posix
    Netsys_pollset_win32
    Netsys_win32
    Netsys_rng
}





{1:ch_web Web Programming}

{div guide}

{3:ch_web_guides Guides}

- {!module:Netcgi_porting}: Porting [netcgi1] programs to [netcgi2]
- {!module:Nethttpd_intro}: Overview over the HTTP daemon

{divend guide}

{3:netcgi1 The [netcgi1] library}

The [netcgi1] library is no longer supported in Ocamlnet 3. Please
switch to [netcgi2].


{2:netcgi2 The [netcgi2] library: web application framework}

This is the revised library for Web applications, now called [netcgi2].

{!modules:
    Netcgi
    Netcgi_common
    Netcgi_cgi
    Netcgi_fcgi
    Netcgi_ajp
    Netcgi_scgi
    Netcgi_test
    Netcgi_dbi
    Netcgi1_compat}


{2:netcgi2_apache The [netcgi2-apache] library: run web apps inside Apache}

This is an Apache connector for the {!netcgi2} library.

{!modules:
    Netcgi_apache
    Netcgi_modtpl}

{2:netcgi2_plex The [netcgi2-plex] library: run web apps with Netplex}

Netplex support for running Netcgi2 connectors:

{!modules:
    Netcgi_plex}

{2:nethttpd The [nethttpd] library: standalone web apps}

The [nethttpd] library is a Web server component written in O'Caml. 
For a full web server, you'll also need [netplex].

{!modules:
   Nethttpd_types
   Nethttpd_kernel
   Nethttpd_reactor
   Nethttpd_engine
   Nethttpd_services
   Nethttpd_plex
   Nethttpd_util
}




{1:ch_cs Client/Server Programming}


{div guide}
{3:ch_cs_guides Guides}

- {!module:Rpc_intro}: Introduction
- {!module:Rpc_mapping_ref}: RPC Language Mapping Reference
- {!module:Rpc_intro_gss}: Securing RPC with the GSS-API

{divend guide}

{3:ch_cs_blog External articles}

- {{:http://blog.camlcity.org/blog/ocamlnet3_ha.html} The next server,
  please!}, by Gerd Stolpmann. About highly-available RPC.

{2:rpc The [rpc] library: SunRPC}

This library implements OncRPC (alias SunRPC).

{!modules:
   Rpc
   Rpc_program
   Rpc_client
   Rpc_simple_client
   Rpc_proxy
   Rpc_server
   Rpc_auth_sys
   Rpc_portmapper
   Rpc_portmapper_aux
   Rpc_portmapper_clnt
   Rpc_transport
   Rpc_packer
   Rpc_auth_gssapi
}

{2:rpc_local The [rpc-auth-local] extension: authentication for local sockets}

Authentication for local socket connections.

{!modules:
    Rpc_auth_local}

{2:rpc_authdh The [rpc-auth-dh] extension: Diffie-Hellman authentication}

This is Diffie-Hellman authentication for OncRPC (also known as
"Secure RPC").

{!modules:
    Rpc_auth_dh
    Rpc_key_service
    Rpc_time}

{2:rpc_xti The [rpc-xti] extension: System V helpers}

System V provides a network API called XTI in addition to the socket API.
This library allows it to connect to RPC services that can only be reached
over a local XTI connection ("cots" connection).

{!modules:
    Rpc_xti_client}

{2:rpc_ssl The [rpc_ssl] extension: SSL encryption}

This library allows you to tunnel RPC through SSL/TLS.

{!modules:
    Rpc_ssl}


{2:netgssapi The [netgssapi] library with the GSS-API framework}

{!modules:
    Netgssapi}

{2:netmech_scram The [netmech-scram] library for SCRAM}

Implements SCRAM (RFC 5802). Right now only for GSS-API.

{!modules:
    Netmech_scram
    Netmech_scram_gssapi}





{1:ch_comp Parallel Computing}

{div guide}
{3:netmcore_intro Guides}

- {!module:Netmcore_basics}: Basics
- {!module:Netmcore_tut}: Tutorial

{divend guide}

{2:netcamlbox The [netcamlbox] library: message passing}

Camlbox is a fast message-passing system between processes running on
the same machine. It uses shared memory for communication. A message
sent to a Camlbox is only copied once, not twice.

{!modules:
    Netcamlbox}

{2:netmulticore The [netmulticore] library: compute jobs}

Netmulticore is an experimental framework for managing multiple
processes, and sending messages between them.

{!modules:
    Netmcore
    Netmcore_process
    Netmcore_mempool
    Netmcore_heap
    Netmcore_array
    Netmcore_buffer
    Netmcore_hashtbl
    Netmcore_matrix
    Netmcore_queue
    Netmcore_ref
    Netmcore_mutex
    Netmcore_sem
    Netmcore_condition
    Netmcore_camlbox
}




{1:ch_netproto Network Protocol Libraries}

{div guide}
{3:ch_netproto_guides Guides}

- {!module:Netclient_tut}: The Netclient tutorial (HTTP, FTP)

{divend guide}

{2:netclient The [netclient] library: HTTP, FTP, Telnet}

This library includes clients for HTTP, Telnet, and FTP.

{!modules:
   Http_client
   Http_client_conncache
   Http_fs
   Ftp_client
   Ftp_data_endpoint
   Ftp_fs
   Telnet_client
}


{2:pop The [pop] library: POP protocol}

This is a simple POP 3 client.

{!modules:
    Netpop}

{2:smtp The [smtp] library: SMTP protocol}

This is a simple SMTP client.

{!modules:
    Netsmtp}



{1 Trailer}

{2 Index}

{!indexlist}

{2 Authors}

The Ocamlnet libraries have been initially written by Gerd Stolpmann and
Patrick Doane.

Contributions by

- Nicolas George: Netdate
- Eric Stokes: FastCGI support
- Pierre Habouzit: SMTP client
- Christophe Troestler: Revised version of [netcgi]
- Deokhwan Kim: Support for EUC-KR

Sponsorships by

- Baretta s.r.l: Nethttpd
- California State University: SSL support for RPC, Netplex
